// * ================================= *
// *  Buttons
// * ================================= *

/* common caret */
.caret {
	position: relative;
	display: inline-block;
	bottom: 2px;
	width: 0;
	height: 0;
	border-right: 4px solid transparent;
	border-left: 4px solid transparent;
	border-top: 4px solid #fff;
	line-height: 1em;
	transition: 0.2s border-color, 0.3s transform;
}

.caret-right {
	position: relative;
	display: inline-block;
	bottom: 2px;
	width: 0;
	height: 0;
	border-top: 4px solid transparent;
	border-bottom: 4px solid transparent;
	border-left: 4px solid #fff;
	line-height: 1em;	
}

/* default button */
.btn {
	position: relative;

	display: inline-block;
	margin: 0;
	padding: 8px 20px;

	font-size: 0.8rem;
	font-weight: 900;
	text-align: center;
	text-decoration: none !important;
	text-transform: uppercase;
	white-space: pre;
	letter-spacing: 2px;
	line-height: 1rem;

	color: #fff;
	background: none;
	background-color: @primary-accent-color;
	cursor: pointer;
	border: 2px solid transparent;
	border-radius: 0;
	outline: none !important;
	
	transition: .15s background, .15s border-color, .15s color, .15s box-shadow;

	&:hover {
		box-shadow: 0 2px 4px -2px rgba(0,0,0,.2);
	}

	&:active {
		box-shadow: 0 0px 1px rgba(0,0,0,.2);
		transition-duration: 0s;
	}

	&.active, 
	.active > &[data-toggle] {
		z-index: 1000;
		perspective: 500;
		box-shadow: 0 2px 4px -2px rgba(0,0,0,.2);
	}

	.caret {
		transform-style: preserve-3d;
	}

	.active[data-dropdown-state="open"] > & .caret {
		transform: rotateX(180deg);
	}
}

// static palette button styles generator mixin
.generate-btn(@base-color: 'primary-accent-color'; @option: 'auto';) {
	
	// inner mixin
	.generate-btn-styles() {
		// default filled style
		& {
			color: @text-color;
			background-color: @btn-color;
			
			// for toggle button
			&.active, &.hollow.active {
				color: @text-color;
				background-color: @btn-color-l1;
				border-color: @btn-color-d2;
			}
			
			&:hover {
				background-color: @btn-color-l1;
				border-color: @btn-color-d1;
			}

			&:active {
				background-color: @btn-color-d1;
				border-color: @btn-color-d2;
			}

		}

		// on dark background
		&.ondark, .dark & {

			// for toggle button
			&.active {
				color: @text-color;
				background-color: @btn-color-d1;
				border-color: @btn-color-l2;

				&:hover {
					border-color: @btn-color-l2;
					background-color: @btn-color;
				}
			}

			&:hover {
				background-color: @btn-color-d1;
				border-color: @btn-color-l1;
			}

			&:active {
				background-color: @btn-color-d2;
				border-color: @btn-color;
			}
		}

		// hollow style
		&.hollow {
			color: @btn-color;
			border-color: @btn-color;
			background: none;

			.caret {
				border-top-color: @btn-color; 
			}
			
			&:hover {
				color: @text-color;
				border-color: @btn-color;
				background-color: @btn-color;
			}

			&:active {
				color: @text-color;
				background-color: @btn-color-d1;
				border-color: @btn-color-d2;
			}

			.dark &:active {
				border-color: @btn-color-l1;
			}

			&:hover, &:active,
			&.active, .active > &[data-toggle="dropdown"] {
				.caret {
					border-top-color: @text-color; 
				}
			} 
		}

		.active > &[data-toggle="dropdown"],
		.active > &[data-toggle="dropdown"]:hover,
		.active > &[data-toggle="dropdown"]:active {
			color: @text-color;
			background-color: @btn-color-d2;
			border-color: @btn-color-d2;
		}

		
		// dropdown styles
		& + ul.dropdown-menu,
		& + ul.dropdown-menu ul.dropdown-menu {
			background: @btn-color-d1;
		}
	}
	
	// define text color
	@text-color: contrast(@@base-color, #000, #fff, 80%);

	// when option is provided
	& when (@option = 'custom') {
		@btn-color: @@base-color;
		@btn-color-l1: ~'@{@{base-color}-l1}';
		@btn-color-l2: ~'@{@{base-color}-l2}';
		@btn-color-d1: ~'@{@{base-color}-d1}';
		@btn-color-d2: ~'@{@{base-color}-d2}';
		
		.generate-btn-styles();
	}

	// else
	& when not (@option = 'custom') {
		@btn-color: @@base-color;
		@btn-color-l1: screen(@btn-color,@l1-additive);
		@btn-color-l2: screen(@btn-color,@l2-additive);
		@btn-color-d1: multiply(@btn-color,@d1-additive);
		@btn-color-d2: multiply(@btn-color,@d2-additive);

		.generate-btn-styles();
	}
	
}


/* disabled */
.btn {
	&.disabled, &:disabled {
		background-color: #666 !important;
		color: #aaa !important;
		box-shadow: none !important;
		border-color: transparent !important;
		cursor: default !important
	}
}

.btn.hollow {
	background: none;

	&.disabled, &:disabled {
		background: none !important;
		color: #aaa !important;
		border-color: #aaa !important;
		box-shadow: none !important;
	}

	.dark &.whitetext:not(.disabled) {
		color: #fff !important;
	}
}


/* button groups */
.btn-group {
	display: inline-block;
	position: relative;
	margin-bottom: 5px;

	.btn {
		float: left;
		z-index: 1;

		&:hover {
			z-index: 2;
		}
	}

	.btn + .btn {
		margin-left: 5px;
	}

	.btn-group {
		float: left;
	}

	.btn-group + .btn-group {
		margin-left: 5px;
	}

	.btn + .btn.dropdown {
		padding-left: 7px;
		padding-right: 7px;
		margin-left: 2px;
	}

	.cf;
}


/* dropdowns */
ul.dropdown-menu {
	position: absolute;
	top: 100%;
	z-index: 1000;
	display: none;
	float: left;
	margin: 0;
	padding: 0;
	list-style: none;

	background: @blue-d1;
	color: #fff;
	.drop-shadow;

	&[data-dropdown-align="right"] {
		right: 0%;
	}


	li {
		margin: 0;
		padding: 0;
		min-width: 180px;

		a {
			width: 100%;
			display: block;
			padding: 7px 20px;
			color: inherit;
			font-size: 0.9em;
		}

		&:hover > a {
			text-decoration: none;
			background: rgba(255,255,255,.3);
		}

		&.divider {
			height: 5px;
			border-bottom: 1px solid rgba(255,255,255,.3);
			padding-bottom: 5px;
			margin-bottom: 5px;
		}
	}
	
	// nested submenu
	& > .submenu {
		position: relative;
		width: 100%;

		& > a {
			position: relative;

			&:after {
				content: " ";
				.caret-right;
				position: absolute;
				top: 50%;
				right: 10px;
				margin-top: -4px;
				transition: 0.2s transform;
			}
		}

		ul.dropdown-menu {
			display: none;
			top: 0;
			left: 100%;
		}

		&:hover {

			& > a:after {
				transform: translateX(2px);
			}

			ul.dropdown-menu {
				display: block;
			}
		}
	}

	// display when active
	[data-dropdown-state="open"] > & {
		display: block;
	}

}


/* button color sets */
.btn {

	& 		{ .generate-btn('primary-accent-color') } 
	
	&.blue 	{ .generate-btn('blue'; 'custom') }
	&.green { .generate-btn('green'; 'custom') }
	&.red 	{ .generate-btn('red'; 'custom') }

	&.black 	{ .generate-btn('black') } 
	&.white 	{ .generate-btn('white') }

	// Add colors here

}





